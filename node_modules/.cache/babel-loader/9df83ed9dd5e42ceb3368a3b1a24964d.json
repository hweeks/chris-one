{"ast":null,"code":"import _defineProperty from \"/home/harrisweeks/Projects/chris-one/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { combineReducers } from \"redux\";\nimport { PICTURE_FETCH, PICTURE_FETCHED } from \"./actions\";\nvar initialState = {\n  isLoading: false,\n  pictures: []\n};\n\nvar pictureReducer = function pictureReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  // we are missing more actions.......\n  switch (type) {\n    case PICTURE_FETCH:\n      {\n        return _objectSpread({}, state, {\n          isLoading: true\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  pics: pictureReducer\n});","map":{"version":3,"sources":["/home/harrisweeks/Projects/chris-one/src/reducer.js"],"names":["combineReducers","PICTURE_FETCH","PICTURE_FETCHED","initialState","isLoading","pictures","pictureReducer","state","type","payload","pics"],"mappings":";;;;;;AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,aAAT,EAAwBC,eAAxB,QAA+C,WAA/C;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,KADQ;AAEnBC,EAAAA,QAAQ,EAAE;AAFS,CAArB;;AAKA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAA6C;AAAA,MAA5CC,KAA4C,uEAApCJ,YAAoC;;AAAA;AAAA,MAApBK,IAAoB,QAApBA,IAAoB;AAAA,MAAdC,OAAc,QAAdA,OAAc;;AAClE;AACA,UAAQD,IAAR;AACE,SAAKP,aAAL;AAAoB;AAClB,iCAAYM,KAAZ;AAAmBH,UAAAA,SAAS,EAAE;AAA9B;AACD;;AACD;AACE,aAAOG,KAAP;AALJ;AAOD,CATD;;AAWA,eAAeP,eAAe,CAAC;AAAEU,EAAAA,IAAI,EAAEJ;AAAR,CAAD,CAA9B","sourcesContent":["import { combineReducers } from \"redux\";\nimport { PICTURE_FETCH, PICTURE_FETCHED } from \"./actions\";\n\nconst initialState = {\n  isLoading: false,\n  pictures: []\n};\n\nconst pictureReducer = (state = initialState, { type, payload }) => {\n  // we are missing more actions.......\n  switch (type) {\n    case PICTURE_FETCH: {\n      return { ...state, isLoading: true };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({ pics: pictureReducer });\n"]},"metadata":{},"sourceType":"module"}